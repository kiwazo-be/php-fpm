# {{ ansible_managed }}
;;;;;;;;;;;;;;;;;;;;;;
; Pool Configuration ;
;;;;;;;;;;;;;;;;;;;;;;

; The address on which to accept FastCGI requests.
; Valid syntaxes are: 'ip.add.re.ss:port', 'port', '/path/to/unix/socket'.
; This option is mandatory for each pool.
listen = {{ listen | mandatory }}

; Set listen(2) backlog.
; A value of '-1' means unlimited.
; Default value: -1.
{% if pool.listen.backlog is defined %}
    listen.backlog = {{- pool.listen.backlog -}}   
{% else %}
    listen.backlog = {{- fpm_conf.listen.backlog -}}
{% endif %}


; List of IPv4 addresses of FastCGI clients which are allowed to connect.
; Equivalent to the FCGI_WEB_SERVER_ADDRS environment variable
; in the original PHP FastCGI (5.2.2+).
; Makes sense only with a tcp listening socket.
; Each address must be separated by a comma.
; If this value is left blank, connections will be accepted from any ip address.
; Default value: any. IPv6 addresses are allowed since PHP 5.5.20 and 5.6.4.
{% if pool.listen.allowed_clients is defined %}
    listen.allowed_clients = {{- pool.listen.allowed_clients -}}    
{% else %}
    listen.allowed_clients = {{- fpm_conf.allowed_clients }}
{% endif %}


; Set permissions for unix socket, if one is used.
; In Linux, read/write permissions must be set in order to allow
; connections from a web server.
; Many BSD-derived systems allow connections regardless of permissions.
; Default values: user and group are set as the running user, mode is set to 0660.
{% if pool.listen.owner is defined%}
    listen.owner = pool.listen.owner
{% endif %}

; See listen.owner
{% if pool.listen.group is defined %}
    listen.group = pool.listen.group
{% endif %}

; See listen.owner
listen.mode = {{ pool.listen.mode | default(listen.mode)}}

; When POSIX Access Control Lists are supported you can set them using this option. 
; When set, listen.owner and listen.group are ignored.
; Value is a comma separated list of user names. Since PHP 5.6.5.
{% if pool.listen.acl_users is defined %}
    listen.acl_users = {{ pool.listen.acl_users }}
{% endif %}

; See listen.acl_users. 
; Value is a comma separated list of group names. Since PHP 5.6.5.
{% if pool.listen.acl_groups is defined %}
    listen.acl_groups = {{ pool.listen.acl_groups }}
{% endif %}

; Unix user of FPM processes. This option is mandatory.
user = {{ user | mandatory }}

; Unix group of FPM processes. If not set, the default user's group is used.
{% if group is defined %}
    group = pool.group
{% endif %}

; Choose how the process manager will control the number of child processes. 
; Possible values: static, ondemand, dynamic. This option is mandatory.
; static - the number of child processes is fixed (pm.max_children).
; ondemand - the processes spawn on demand (when requested, as opposed to dynamic, where pm.start_servers are started when the service is started.
; dynamic - the number of child processes is set dynamically based on the following directives: pm.max_children, pm.start_servers, pm.min_spare_servers, pm.max_spare_servers.
pm = {{ pool.pm | mandatory }}

; The number of child processes to be created when pm is set to static and the maximum number of child processes to be created when pm is set to dynamic. 
; This option is mandatory.
; This option sets the limit on the number of simultaneous requests that will be served. 
; Equivalent to the ApacheMaxClients directive with mpm_prefork and to the PHP_FCGI_CHILDREN environment variable in the original PHP FastCGI.
pm.max_children = {{ pool.pm.max_children | mandatory }}

; The number of child processes created on startup.
; Used only when pm is set to dynamic.
; Default Value: min_spare_servers + (max_spare_servers - min_spare_servers) / 2.
{% if pool.pm.start_servers is defined %}
    pm.start_servers = {{- pool.pm.start_servers -}}
{% else %}    
    pm.start_servers = {{- fpm_conf.pm.start_servers  -}}
{% endif %}


; The desired minimum number of idle server processes.
; Used only when pm is set to dynamic.
; Also mandatory in this case.
{% if pool.pm == "dynamic" %}
    pm.min_spare_servers = {{ pool.min_spare_servers | mandatory}}
{% endif %}

; The desired maximum number of idle server processes.
; Used only when pm is set to dynamic.
; Also mandatory in this case.
{% if pool.pm == "dynamic" %}
    pm.max_spare_servers = {{ pool.max_spare_servers | mandatory}}
{% endif %}

; The number of seconds after which an idle process will be killed.
; Used only when pm is set to ondemand.
; Available units: s(econds)(default), m(inutes), h(ours), or d(ays).
; Default value: 10s.
{% if pool.pm.process_idle_timeout is defined %}
    pm.process_idle_timeout = {{- pool.pm.process_idle_timeout -}}    
{% else %}
    pm.process_idle_timeout = {{- fpm_conf.pm.process_idle_timeout -}}
{% endif %}


; The number of requests each child process should execute before respawning.
; This can be useful to work around memory leaks in 3rd party libraries.
; For endless request processing specify '0'.
; Equivalent to PHP_FCGI_MAX_REQUESTS.
; Default value: 0.
pm.max_requests = {{ pool.pm.max_requests | default(pm.max_requests)}}

; The URI to view the FPM status page.
; If this value is not set, no URI will be recognized as a status page.
; Default value: none.
{% if pool.pm.status_path is defined %}
    pm.status_path = {{ pool.pm.status_path }}    
{% endif %}

; The ping URI to call the monitoring page of FPM.
; If this value is not set, no URI will be recognized as a ping page.
; This could be used to test from outside that FPM is alive and responding.
; Please note that the value must start with a leading slash (/).
{% if pool.ping.path is defined %}
    ping.path = {{ pool.ping.path }}
{% endif %}

; This directive may be used to customize the response to a ping request.
; The response is formatted as text/plain with a 200 response code.
; Default value: pong
{% if pool.ping.response is defined %}
    ping.response = {{ pool.ping.response }}
{% else %}
    ping.response = {{ fpm_conf.ping.response }}
{% endif %}

; Specify the nice(2) priority to apply to the worker process (only if set).
; The value can vary from -19 (highest priority) to 20 (lower priority).
; Default value: not set.
{% if pool.processes.priority is defined %}
    processes.priority = {{ pool.processes.priority}}    
{% endif %}

; Specify prefix for path evaluation
{% if pool.prefix is defined %}
    prefix = {{ pool.prefix }}
{% endif %}

; The timeout for serving a single request after which the worker process will be killed.
; This option should be used when the 'max_execution_time' ini option does not stop script execution for some reason.
; A value of '0' means 'Off'.
; Available units: s(econds)(default), m(inutes), h(ours), or d(ays).
; Default value: 0.
{% if pool.request_terminate_timeout is defined %}
    request_terminate_timeout = {{ pool.request_terminate_timeout }}
{% else %}
    request_terminate_timeout = {{ fpm_conf.request_terminate_timeout}}
{% endif %}


; The timeout for serving a single request after which a PHP backtrace will be dumped to the 'slowlog' file. 
; A value of '0' means 'Off'. 
; Available units: s(econds)(default), m(inutes), h(ours), or d(ays).
; Default value: 0.
{% if pool.request_slowlog_timeout is defined %}
    request_slowlog_timeout = {{ pool.request_slowlog_timeout }}
{% else %}
    request_slowlog_timeout = {{ fpm_conf.request_slowlog_timeout}}
{% endif %}

; The log file for slow requests. 
; Default value: #INSTALL_PREFIX#/log/php-fpm.log.slow.
{% if pool.slowlog %}
    slowlog = pool.slowlog
{% else %}
    slowlog = fpm_conf.slowlog
{% endif %}

; Set open file descriptor rlimit for child processes in this pool.
; Default value: system defined value.
{% if pool.rlimit_files is defined %}
    rlimit_files = {{ pool.rlimit_files }}    
{% endif %}

; limit_core int
; Set max core size rlimit for child processes in this pool.
; Possible Values: 'unlimited' or an integer greater or equal to 0.
; Default value: system defined value.
{% if pool.rlimit_core is defined %}
    rlimit_core = {{ pool.rlimit_core }}
{% endif %}

; Chroot to this directory at the start.
; This value must be defined as an absolute path.
; When this value is not set, chroot is not used.
{% if pool.chroot is defined %}
    chroot = pool.chroot
{% endif %}

; Chdir to this directory at the start.
; This value must be an absolute path.
; Default value: current directory or / when chroot.
{% if pool.chdir is defined %}
    chdir = {{ pool.chdir }}
{% endif %}

; Redirect worker stdout and stderr into main error log.
; If not set, stdout and stderr will be redirected to /dev/null according to FastCGI specs.
; Default value: no.
{% if pool.catch_workers_output is defined %}
    catch_workers_output = {{ pool.catch_workers_output }}
{% else %}
    catch_workers_output = {{ fpm_conf.catch_workers_output }}
{% endif %}


; Clear environment in FPM workers.
; Prevents arbitrary environment variables from reaching FPM worker processes
; by clearing the environment in workers before env vars specified in this pool configuration are added.
; Since PHP 5.4.27, 5.5.11, and 5.6.0. Default value: Yes.
{% if pool.clear_env is defined %}
    clear_env = pool.clear_env
{% else %}
    clear_env = fpm_conf.clear_env
{% endif %}

; Limits the extensions of the main script FPM will allow to parse.
; This can prevent configuration mistakes on the web server side.
; You should only limit FPM to .php extensions to prevent malicious
; users to use other extensions to execute php code.
; Default value: .php .phar
{% if pool.security.limit_extensions is defined %}
    security.limit_extensions = pool.security.limit_extensions
{% else %}
    security.limit_extensions = fpm_conf.security.limit_extensions
{% endif %}

; The access log file. Default value: not set
{% if pool.access.log is defined %}
    access.log = {{ pool.access.log }}
{% endif %}

; The access log format. Default value: "%R - %u %t \"%m %r\" %s"
{% if pool.access.format is defined %}
    access.format = {{ pool.access.format }}
{% else %}
    access.format = {{ fpm_conf.access.format }}
{% endif %}
